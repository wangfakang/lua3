{"name":"Lua3","tagline":"lua string performance and using table ","body":"`对lua中字符串类型的认识：`\r\n\r\n　　首先在lua中其字符串的处理都是一种引用的方式，比如有两个字符串变量的值是一样的则在内存中是指向同一个字符串的，\r\n相当于引用计数.而且在lua中是不允许直接对字符串进行修改的，相当于一个常量区的．此时只可以在新的位置进行开一个\r\n空间然后进行旧值拷贝什么的工作．      \r\n　\r\n　　方法想必大家对lua中的字符串连接都知道吧［十分简单＂..＂字符串之间使用两个点号就可以进行连接了］．     \r\n\r\n  * 注意：   \r\n     * 场景：     \r\n　      当我们在一个程序中进行多次操作［使用\"..\"进行连接字符串的操作］的时候［如循环］就会给性能上   \r\n　　    造成很大的影响．     \r\n     * 原因：         \r\n　      其实原因也很简单，就像我开始介绍lua字符串类型一样［lua字符串类型的特点］，相同的值字符串使\r\n        用同一块内存空间，不同的话则会开辟新的内存空间进行值的拷贝．当这种操作多了自然性能就下降了．       \r\n   * 解决方案：       \r\n        使用lua中的table来解决这个问题如：     \r\n\r\n## 传统的方式:   \r\n　\r\n```lua\r\n  1 local t = \"\"\r\n  2 local test = {\"hello\",\"world\",\"haha\"}\r\n  3 for j,line in ipairs(test) do\r\n  4     t = t..line\r\n  5 end \r\n  6 print(t)\r\n```\r\n\r\n## 改善的方式：\r\n　\r\n　\r\n```lua\r\n　\r\n　1 local t = {}\r\n  2 local test = {\"hello\",\"world\",\"haha\"}\r\n  3 for j,line in ipairs(test) do\r\n  4     t[#t + 1] = line\r\n  5 end \r\n  6 s = table.concat(t)\r\n  7 \r\n  8 print(s)\r\n```\r\n\r\n当使用第二种方案时候，在处理很多的时候其性能还是提升了不少．　　　\r\n\r\n欢迎一起交流学习 \r\n====\r\n \r\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\r\n\r\n* 邮件(1031379296#qq.com, 把#换成@)\r\n* QQ: 1031379296\r\n* weibo: [@王发康](http://weibo.com/u/2786211992/home)\r\n\r\n\r\nThx\r\n====\r\n\r\n* chunshengsterATgmail.com\r\n\r\n\r\nAuthor\r\n====\r\n* Linux\\nginx\\golang\\c\\c++爱好者\r\n* 欢迎一起交流  一起学习# \r\n* Others say good and Others good\r\n\r\n\r\n","google":"lua string performance and using table ","note":"Don't delete this file! It's used internally to help with page regeneration."}